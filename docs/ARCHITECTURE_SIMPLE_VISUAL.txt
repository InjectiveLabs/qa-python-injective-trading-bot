╔════════════════════════════════════════════════════════════════════╗
║              TRADING BOT SYSTEM - DOCKER ARCHITECTURE              ║
╚════════════════════════════════════════════════════════════════════╝

                    ┌─────────────────────┐
                    │   Users (Browser)   │
                    │  trading-bot.com    │
                    └──────────┬──────────┘
                               │ HTTPS
                               ▼
                    ┌─────────────────────┐
                    │  Reverse Proxy      │
                    │  (Your Setup)       │
                    │  Port 80/443        │
                    └──────────┬──────────┘
                               │
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                        DOCKER HOST                                ┃
┃                                                                   ┃
┃    ┌─────────────────────────────────────────────────────┐       ┃
┃    │          WEB DASHBOARD CONTAINER                    │       ┃
┃    │                                                      │       ┃
┃    │  • FastAPI Web App                                  │       ┃
┃    │  • User Interface (Start/Stop Bots)                │       ┃
┃    │  • Real-time Monitoring                             │       ┃
┃    │  • Docker SDK Integration                           │       ┃
┃    │                                                      │       ┃
┃    │  Port 8000                                          │       ┃
┃    │                                                      │       ┃
┃    │  ⚠️  Needs: /var/run/docker.sock                    │       ┃
┃    │  (To create/manage bot containers)                  │       ┃
┃    └──────────────────┬──────────────────────────────────┘       ┃
┃                       │                                           ┃
┃                       │ Docker API                                ┃
┃                       │ (start/stop/monitor)                      ┃
┃                       ▼                                           ┃
┃    ┌────────────────────────────────────────────────────────┐    ┃
┃    │          BOT CONTAINERS (Dynamic)                      │    ┃
┃    │                                                        │    ┃
┃    │  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────┐  │    ┃
┃    │  │  Spot    │  │  Spot    │  │  Deriv   │  │ ...  │  │    ┃
┃    │  │ Wallet1  │  │ Wallet2  │  │ Wallet3  │  │      │  │    ┃
┃    │  │ INJ/USDT │  │ TIA/USDT │  │ INJ-PERP │  │      │  │    ┃
┃    │  │          │  │          │  │          │  │      │  │    ┃
┃    │  │ ● RUNNING│  │ ● RUNNING│  │ ○ STOPPED│  │      │  │    ┃
┃    │  └──────────┘  └──────────┘  └──────────┘  └──────┘  │    ┃
┃    │                                                        │    ┃
┃    │  • Each bot is isolated                               │    ┃
┃    │  • Auto-restart on crash                              │    ┃
┃    │  • Created on-demand by dashboard                     │    ┃
┃    │  • Share logs & config via volumes                    │    ┃
┃    └────────────────────────────────────────────────────────┘    ┃
┃                       │                                           ┃
┃                       │ Write logs / Read config                  ┃
┃                       ▼                                           ┃
┃    ┌────────────────────────────────────────────────────────┐    ┃
┃    │               PERSISTENT VOLUMES                       │    ┃
┃    │                                                        │    ┃
┃    │  📁 /logs/                                             │    ┃
┃    │     ├── spot_trader.log                               │    ┃
┃    │     ├── derivative_trader.log                         │    ┃
┃    │     └── (5-day retention)                             │    ┃
┃    │                                                        │    ┃
┃    │  📁 /config/                                           │    ┃
┃    │     ├── trader_config.json                            │    ┃
┃    │     └── markets_config.json                           │    ┃
┃    │                                                        │    ┃
┃    │  🔐 .env (secrets)                                     │    ┃
┃    │     ├── WALLET_1_PRIVATE_KEY                          │    ┃
┃    │     ├── WALLET_2_PRIVATE_KEY                          │    ┃
┃    │     └── WALLET_3_PRIVATE_KEY                          │    ┃
┃    └────────────────────────────────────────────────────────┘    ┃
┃                                                                   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
                             │
                             │ HTTPS (Outbound)
                             ▼
          ┌──────────────────────────────────────┐
          │      EXTERNAL APIs (Internet)        │
          │                                      │
          │  • Injective Testnet (trading)       │
          │  • Injective Mainnet (price data)    │
          └──────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════╗
║                         USER WORKFLOW                              ║
╚════════════════════════════════════════════════════════════════════╝

1. User opens web dashboard
              │
              ▼
2. Selects: Wallet 2 + TIA/USDT + Spot
              │
              ▼
3. Clicks "Start Bot"
              │
              ▼
4. Dashboard calls Docker API:
   docker run -d spot-trader:latest \
     -e WALLET_ID=wallet_2 \
     -e MARKET=TIA/USDT \
     -e WALLET_PRIVATE_KEY=***
              │
              ▼
5. Container starts trading
              │
              ▼
6. Dashboard shows:
   ┌─────────────────────────────────────┐
   │ Wallet 2 - TIA/USDT (Spot)          │
   │ Container: abc123                   │
   │ Uptime: 01:23:45                    │
   │ Balance: TIA: 1,234 | USDT: 890     │
   │ Price: ↗ Testnet $15.23 | $15.20    │
   │ [Stop] [View Logs]                  │
   └─────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════╗
║                        RESOURCE NEEDS                              ║
╚════════════════════════════════════════════════════════════════════╝

Server Requirements:
  • OS: Linux with Docker & Docker Compose
  • RAM: 1-2 GB (for 3-6 concurrent bots)
  • CPU: 2 cores minimum
  • Disk: 5-10 GB (images + logs)
  • Network: Outbound HTTPS to Injective APIs

Per Container:
  • Web Dashboard: 256 MB RAM, 0.5 CPU
  • Each Bot: 128 MB RAM, 0.25 CPU


╔════════════════════════════════════════════════════════════════════╗
║                    CRITICAL DECISION POINTS                        ║
╚════════════════════════════════════════════════════════════════════╝

🔴 1. Docker Socket Access
   Web needs /var/run/docker.sock to manage bots
   → Security consideration: Full Docker control
   → Options: Direct / Socket Proxy / Pre-defined bots

🔐 2. Secrets Management  
   Where to store wallet private keys?
   → Options: .env / Docker Secrets / Vault

💾 3. Persistent Storage
   How to handle logs and config?
   → Options: Bind mounts / Named volumes

🚀 4. Deployment Method
   How to deploy updates?
   → Options: Manual / CI/CD / DevOps-managed


╔════════════════════════════════════════════════════════════════════╗
║                          BENEFITS                                  ║
╚════════════════════════════════════════════════════════════════════╝

✅ Isolation - One bot crash doesn't affect others
✅ Scalability - Easy to add more wallets/markets
✅ Flexibility - Users control what runs when
✅ Portability - Works on any Docker host
✅ Consistency - Dev/prod environments identical
✅ Updates - Deploy without stopping all bots


╔════════════════════════════════════════════════════════════════════╗
║                     QUESTIONS FOR YOU                              ║
╚════════════════════════════════════════════════════════════════════╝

Priority Questions:
  1. Which server/environment will this run on?
  2. Is Docker socket access acceptable? (with HTTP auth)
  3. How should we manage wallet private keys?
  4. Bind mounts or named volumes for persistence?
  5. How will we deploy updates?
  6. Do you have reverse proxy/SSL set up?

See DEVOPS_QUESTIONS.md for complete list.
